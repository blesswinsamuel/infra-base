// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * IngressRouteTCP is the CRD implementation of a Traefik TCP Router.
 *
 * @schema IngressRouteTCP
 */
export class IngressRouteTcp extends ApiObject {
  /**
   * Returns the apiVersion and kind for "IngressRouteTCP"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'traefik.io/v1alpha1',
    kind: 'IngressRouteTCP',
  }

  /**
   * Renders a Kubernetes manifest for "IngressRouteTCP".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: IngressRouteTcpProps): any {
    return {
      ...IngressRouteTcp.GVK,
      ...toJson_IngressRouteTcpProps(props),
    };
  }

  /**
   * Defines a "IngressRouteTCP" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: IngressRouteTcpProps) {
    super(scope, id, {
      ...IngressRouteTcp.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...IngressRouteTcp.GVK,
      ...toJson_IngressRouteTcpProps(resolved),
    };
  }
}

/**
 * IngressRouteTCP is the CRD implementation of a Traefik TCP Router.
 *
 * @schema IngressRouteTCP
 */
export interface IngressRouteTcpProps {
  /**
   * @schema IngressRouteTCP#metadata
   */
  readonly metadata: ApiObjectMetadata;

  /**
   * IngressRouteTCPSpec defines the desired state of IngressRouteTCP.
   *
   * @schema IngressRouteTCP#spec
   */
  readonly spec: IngressRouteTcpSpec;

}

/**
 * Converts an object of type 'IngressRouteTcpProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IngressRouteTcpProps(obj: IngressRouteTcpProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_IngressRouteTcpSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * IngressRouteTCPSpec defines the desired state of IngressRouteTCP.
 *
 * @schema IngressRouteTcpSpec
 */
export interface IngressRouteTcpSpec {
  /**
   * EntryPoints defines the list of entry point names to bind to. Entry points have to be configured in the static configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/entrypoints/ Default: all.
   *
   * @schema IngressRouteTcpSpec#entryPoints
   */
  readonly entryPoints?: string[];

  /**
   * Routes defines the list of routes.
   *
   * @schema IngressRouteTcpSpec#routes
   */
  readonly routes: IngressRouteTcpSpecRoutes[];

  /**
   * TLS defines the TLS configuration on a layer 4 / TCP Route. More info: https://doc.traefik.io/traefik/v2.10/routing/routers/#tls_1
   *
   * @schema IngressRouteTcpSpec#tls
   */
  readonly tls?: IngressRouteTcpSpecTls;

}

/**
 * Converts an object of type 'IngressRouteTcpSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IngressRouteTcpSpec(obj: IngressRouteTcpSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'entryPoints': obj.entryPoints?.map(y => y),
    'routes': obj.routes?.map(y => toJson_IngressRouteTcpSpecRoutes(y)),
    'tls': toJson_IngressRouteTcpSpecTls(obj.tls),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RouteTCP holds the TCP route configuration.
 *
 * @schema IngressRouteTcpSpecRoutes
 */
export interface IngressRouteTcpSpecRoutes {
  /**
   * Match defines the router's rule. More info: https://doc.traefik.io/traefik/v2.10/routing/routers/#rule_1
   *
   * @schema IngressRouteTcpSpecRoutes#match
   */
  readonly match: string;

  /**
   * Middlewares defines the list of references to MiddlewareTCP resources.
   *
   * @schema IngressRouteTcpSpecRoutes#middlewares
   */
  readonly middlewares?: IngressRouteTcpSpecRoutesMiddlewares[];

  /**
   * Priority defines the router's priority. More info: https://doc.traefik.io/traefik/v2.10/routing/routers/#priority_1
   *
   * @schema IngressRouteTcpSpecRoutes#priority
   */
  readonly priority?: number;

  /**
   * Services defines the list of TCP services.
   *
   * @schema IngressRouteTcpSpecRoutes#services
   */
  readonly services?: IngressRouteTcpSpecRoutesServices[];

}

/**
 * Converts an object of type 'IngressRouteTcpSpecRoutes' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IngressRouteTcpSpecRoutes(obj: IngressRouteTcpSpecRoutes | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'match': obj.match,
    'middlewares': obj.middlewares?.map(y => toJson_IngressRouteTcpSpecRoutesMiddlewares(y)),
    'priority': obj.priority,
    'services': obj.services?.map(y => toJson_IngressRouteTcpSpecRoutesServices(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * TLS defines the TLS configuration on a layer 4 / TCP Route. More info: https://doc.traefik.io/traefik/v2.10/routing/routers/#tls_1
 *
 * @schema IngressRouteTcpSpecTls
 */
export interface IngressRouteTcpSpecTls {
  /**
   * CertResolver defines the name of the certificate resolver to use. Cert resolvers have to be configured in the static configuration. More info: https://doc.traefik.io/traefik/v2.10/https/acme/#certificate-resolvers
   *
   * @schema IngressRouteTcpSpecTls#certResolver
   */
  readonly certResolver?: string;

  /**
   * Domains defines the list of domains that will be used to issue certificates. More info: https://doc.traefik.io/traefik/v2.10/routing/routers/#domains
   *
   * @schema IngressRouteTcpSpecTls#domains
   */
  readonly domains?: IngressRouteTcpSpecTlsDomains[];

  /**
   * Options defines the reference to a TLSOption, that specifies the parameters of the TLS connection. If not defined, the `default` TLSOption is used. More info: https://doc.traefik.io/traefik/v2.10/https/tls/#tls-options
   *
   * @schema IngressRouteTcpSpecTls#options
   */
  readonly options?: IngressRouteTcpSpecTlsOptions;

  /**
   * Passthrough defines whether a TLS router will terminate the TLS connection.
   *
   * @schema IngressRouteTcpSpecTls#passthrough
   */
  readonly passthrough?: boolean;

  /**
   * SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.
   *
   * @schema IngressRouteTcpSpecTls#secretName
   */
  readonly secretName?: string;

  /**
   * Store defines the reference to the TLSStore, that will be used to store certificates. Please note that only `default` TLSStore can be used.
   *
   * @schema IngressRouteTcpSpecTls#store
   */
  readonly store?: IngressRouteTcpSpecTlsStore;

}

/**
 * Converts an object of type 'IngressRouteTcpSpecTls' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IngressRouteTcpSpecTls(obj: IngressRouteTcpSpecTls | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'certResolver': obj.certResolver,
    'domains': obj.domains?.map(y => toJson_IngressRouteTcpSpecTlsDomains(y)),
    'options': toJson_IngressRouteTcpSpecTlsOptions(obj.options),
    'passthrough': obj.passthrough,
    'secretName': obj.secretName,
    'store': toJson_IngressRouteTcpSpecTlsStore(obj.store),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ObjectReference is a generic reference to a Traefik resource.
 *
 * @schema IngressRouteTcpSpecRoutesMiddlewares
 */
export interface IngressRouteTcpSpecRoutesMiddlewares {
  /**
   * Name defines the name of the referenced Traefik resource.
   *
   * @schema IngressRouteTcpSpecRoutesMiddlewares#name
   */
  readonly name: string;

  /**
   * Namespace defines the namespace of the referenced Traefik resource.
   *
   * @schema IngressRouteTcpSpecRoutesMiddlewares#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'IngressRouteTcpSpecRoutesMiddlewares' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IngressRouteTcpSpecRoutesMiddlewares(obj: IngressRouteTcpSpecRoutesMiddlewares | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ServiceTCP defines an upstream TCP service to proxy traffic to.
 *
 * @schema IngressRouteTcpSpecRoutesServices
 */
export interface IngressRouteTcpSpecRoutesServices {
  /**
   * Name defines the name of the referenced Kubernetes Service.
   *
   * @schema IngressRouteTcpSpecRoutesServices#name
   */
  readonly name: string;

  /**
   * Namespace defines the namespace of the referenced Kubernetes Service.
   *
   * @schema IngressRouteTcpSpecRoutesServices#namespace
   */
  readonly namespace?: string;

  /**
   * NativeLB controls, when creating the load-balancer, whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP. The Kubernetes Service itself does load-balance to the pods. By default, NativeLB is false.
   *
   * @schema IngressRouteTcpSpecRoutesServices#nativeLB
   */
  readonly nativeLb?: boolean;

  /**
   * Port defines the port of a Kubernetes Service. This can be a reference to a named port.
   *
   * @schema IngressRouteTcpSpecRoutesServices#port
   */
  readonly port: IngressRouteTcpSpecRoutesServicesPort;

  /**
   * ProxyProtocol defines the PROXY protocol configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/services/#proxy-protocol
   *
   * @schema IngressRouteTcpSpecRoutesServices#proxyProtocol
   */
  readonly proxyProtocol?: IngressRouteTcpSpecRoutesServicesProxyProtocol;

  /**
   * TerminationDelay defines the deadline that the proxy sets, after one of its connected peers indicates it has closed the writing capability of its connection, to close the reading capability as well, hence fully terminating the connection. It is a duration in milliseconds, defaulting to 100. A negative value means an infinite deadline (i.e. the reading capability is never closed).
   *
   * @schema IngressRouteTcpSpecRoutesServices#terminationDelay
   */
  readonly terminationDelay?: number;

  /**
   * Weight defines the weight used when balancing requests between multiple Kubernetes Service.
   *
   * @schema IngressRouteTcpSpecRoutesServices#weight
   */
  readonly weight?: number;

}

/**
 * Converts an object of type 'IngressRouteTcpSpecRoutesServices' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IngressRouteTcpSpecRoutesServices(obj: IngressRouteTcpSpecRoutesServices | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
    'nativeLB': obj.nativeLb,
    'port': obj.port?.value,
    'proxyProtocol': toJson_IngressRouteTcpSpecRoutesServicesProxyProtocol(obj.proxyProtocol),
    'terminationDelay': obj.terminationDelay,
    'weight': obj.weight,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Domain holds a domain name with SANs.
 *
 * @schema IngressRouteTcpSpecTlsDomains
 */
export interface IngressRouteTcpSpecTlsDomains {
  /**
   * Main defines the main domain name.
   *
   * @schema IngressRouteTcpSpecTlsDomains#main
   */
  readonly main?: string;

  /**
   * SANs defines the subject alternative domain names.
   *
   * @schema IngressRouteTcpSpecTlsDomains#sans
   */
  readonly sans?: string[];

}

/**
 * Converts an object of type 'IngressRouteTcpSpecTlsDomains' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IngressRouteTcpSpecTlsDomains(obj: IngressRouteTcpSpecTlsDomains | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'main': obj.main,
    'sans': obj.sans?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Options defines the reference to a TLSOption, that specifies the parameters of the TLS connection. If not defined, the `default` TLSOption is used. More info: https://doc.traefik.io/traefik/v2.10/https/tls/#tls-options
 *
 * @schema IngressRouteTcpSpecTlsOptions
 */
export interface IngressRouteTcpSpecTlsOptions {
  /**
   * Name defines the name of the referenced Traefik resource.
   *
   * @schema IngressRouteTcpSpecTlsOptions#name
   */
  readonly name: string;

  /**
   * Namespace defines the namespace of the referenced Traefik resource.
   *
   * @schema IngressRouteTcpSpecTlsOptions#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'IngressRouteTcpSpecTlsOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IngressRouteTcpSpecTlsOptions(obj: IngressRouteTcpSpecTlsOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Store defines the reference to the TLSStore, that will be used to store certificates. Please note that only `default` TLSStore can be used.
 *
 * @schema IngressRouteTcpSpecTlsStore
 */
export interface IngressRouteTcpSpecTlsStore {
  /**
   * Name defines the name of the referenced Traefik resource.
   *
   * @schema IngressRouteTcpSpecTlsStore#name
   */
  readonly name: string;

  /**
   * Namespace defines the namespace of the referenced Traefik resource.
   *
   * @schema IngressRouteTcpSpecTlsStore#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'IngressRouteTcpSpecTlsStore' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IngressRouteTcpSpecTlsStore(obj: IngressRouteTcpSpecTlsStore | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Port defines the port of a Kubernetes Service. This can be a reference to a named port.
 *
 * @schema IngressRouteTcpSpecRoutesServicesPort
 */
export class IngressRouteTcpSpecRoutesServicesPort {
  public static fromNumber(value: number): IngressRouteTcpSpecRoutesServicesPort {
    return new IngressRouteTcpSpecRoutesServicesPort(value);
  }
  public static fromString(value: string): IngressRouteTcpSpecRoutesServicesPort {
    return new IngressRouteTcpSpecRoutesServicesPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * ProxyProtocol defines the PROXY protocol configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/services/#proxy-protocol
 *
 * @schema IngressRouteTcpSpecRoutesServicesProxyProtocol
 */
export interface IngressRouteTcpSpecRoutesServicesProxyProtocol {
  /**
   * Version defines the PROXY Protocol version to use.
   *
   * @schema IngressRouteTcpSpecRoutesServicesProxyProtocol#version
   */
  readonly version?: number;

}

/**
 * Converts an object of type 'IngressRouteTcpSpecRoutesServicesProxyProtocol' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IngressRouteTcpSpecRoutesServicesProxyProtocol(obj: IngressRouteTcpSpecRoutesServicesProxyProtocol | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'version': obj.version,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

