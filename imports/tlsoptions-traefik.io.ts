// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * TLSOption is the CRD implementation of a Traefik TLS Option, allowing to configure some parameters of the TLS connection. More info: https://doc.traefik.io/traefik/v2.10/https/tls/#tls-options
 *
 * @schema TLSOption
 */
export class TlsOption extends ApiObject {
  /**
   * Returns the apiVersion and kind for "TLSOption"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'traefik.io/v1alpha1',
    kind: 'TLSOption',
  }

  /**
   * Renders a Kubernetes manifest for "TLSOption".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: TlsOptionProps): any {
    return {
      ...TlsOption.GVK,
      ...toJson_TlsOptionProps(props),
    };
  }

  /**
   * Defines a "TLSOption" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: TlsOptionProps) {
    super(scope, id, {
      ...TlsOption.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...TlsOption.GVK,
      ...toJson_TlsOptionProps(resolved),
    };
  }
}

/**
 * TLSOption is the CRD implementation of a Traefik TLS Option, allowing to configure some parameters of the TLS connection. More info: https://doc.traefik.io/traefik/v2.10/https/tls/#tls-options
 *
 * @schema TLSOption
 */
export interface TlsOptionProps {
  /**
   * @schema TLSOption#metadata
   */
  readonly metadata: ApiObjectMetadata;

  /**
   * TLSOptionSpec defines the desired state of a TLSOption.
   *
   * @schema TLSOption#spec
   */
  readonly spec: TlsOptionSpec;

}

/**
 * Converts an object of type 'TlsOptionProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TlsOptionProps(obj: TlsOptionProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_TlsOptionSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * TLSOptionSpec defines the desired state of a TLSOption.
 *
 * @schema TlsOptionSpec
 */
export interface TlsOptionSpec {
  /**
   * ALPNProtocols defines the list of supported application level protocols for the TLS handshake, in order of preference. More info: https://doc.traefik.io/traefik/v2.10/https/tls/#alpn-protocols
   *
   * @schema TlsOptionSpec#alpnProtocols
   */
  readonly alpnProtocols?: string[];

  /**
   * CipherSuites defines the list of supported cipher suites for TLS versions up to TLS 1.2. More info: https://doc.traefik.io/traefik/v2.10/https/tls/#cipher-suites
   *
   * @schema TlsOptionSpec#cipherSuites
   */
  readonly cipherSuites?: string[];

  /**
   * ClientAuth defines the server's policy for TLS Client Authentication.
   *
   * @schema TlsOptionSpec#clientAuth
   */
  readonly clientAuth?: TlsOptionSpecClientAuth;

  /**
   * CurvePreferences defines the preferred elliptic curves in a specific order. More info: https://doc.traefik.io/traefik/v2.10/https/tls/#curve-preferences
   *
   * @schema TlsOptionSpec#curvePreferences
   */
  readonly curvePreferences?: string[];

  /**
   * MaxVersion defines the maximum TLS version that Traefik will accept. Possible values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13. Default: None.
   *
   * @schema TlsOptionSpec#maxVersion
   */
  readonly maxVersion?: string;

  /**
   * MinVersion defines the minimum TLS version that Traefik will accept. Possible values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13. Default: VersionTLS10.
   *
   * @schema TlsOptionSpec#minVersion
   */
  readonly minVersion?: string;

  /**
   * PreferServerCipherSuites defines whether the server chooses a cipher suite among his own instead of among the client's. It is enabled automatically when minVersion or maxVersion is set. Deprecated: https://github.com/golang/go/issues/45430
   *
   * @schema TlsOptionSpec#preferServerCipherSuites
   */
  readonly preferServerCipherSuites?: boolean;

  /**
   * SniStrict defines whether Traefik allows connections from clients connections that do not specify a server_name extension.
   *
   * @schema TlsOptionSpec#sniStrict
   */
  readonly sniStrict?: boolean;

}

/**
 * Converts an object of type 'TlsOptionSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TlsOptionSpec(obj: TlsOptionSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'alpnProtocols': obj.alpnProtocols?.map(y => y),
    'cipherSuites': obj.cipherSuites?.map(y => y),
    'clientAuth': toJson_TlsOptionSpecClientAuth(obj.clientAuth),
    'curvePreferences': obj.curvePreferences?.map(y => y),
    'maxVersion': obj.maxVersion,
    'minVersion': obj.minVersion,
    'preferServerCipherSuites': obj.preferServerCipherSuites,
    'sniStrict': obj.sniStrict,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ClientAuth defines the server's policy for TLS Client Authentication.
 *
 * @schema TlsOptionSpecClientAuth
 */
export interface TlsOptionSpecClientAuth {
  /**
   * ClientAuthType defines the client authentication type to apply.
   *
   * @schema TlsOptionSpecClientAuth#clientAuthType
   */
  readonly clientAuthType?: TlsOptionSpecClientAuthClientAuthType;

  /**
   * SecretNames defines the names of the referenced Kubernetes Secret storing certificate details.
   *
   * @schema TlsOptionSpecClientAuth#secretNames
   */
  readonly secretNames?: string[];

}

/**
 * Converts an object of type 'TlsOptionSpecClientAuth' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TlsOptionSpecClientAuth(obj: TlsOptionSpecClientAuth | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'clientAuthType': obj.clientAuthType,
    'secretNames': obj.secretNames?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ClientAuthType defines the client authentication type to apply.
 *
 * @schema TlsOptionSpecClientAuthClientAuthType
 */
export enum TlsOptionSpecClientAuthClientAuthType {
  /** NoClientCert */
  NO_CLIENT_CERT = "NoClientCert",
  /** RequestClientCert */
  REQUEST_CLIENT_CERT = "RequestClientCert",
  /** RequireAnyClientCert */
  REQUIRE_ANY_CLIENT_CERT = "RequireAnyClientCert",
  /** VerifyClientCertIfGiven */
  VERIFY_CLIENT_CERT_IF_GIVEN = "VerifyClientCertIfGiven",
  /** RequireAndVerifyClientCert */
  REQUIRE_AND_VERIFY_CLIENT_CERT = "RequireAndVerifyClientCert",
}

